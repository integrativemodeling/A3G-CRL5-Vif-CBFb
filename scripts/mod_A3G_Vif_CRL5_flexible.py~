############################################
# Modeling the A3G-VCBC complex
# with only three rbs.
#
# iecheverria - Sali Lab - UCSF
############################################
import IMP
import RMF
import IMP.atom
import IMP.rmf
import IMP.pmi
import IMP.pmi.mmcif
import IMP.pmi.topology
import IMP.pmi.dof
import IMP.pmi.macros
import IMP.pmi.restraints
import IMP.pmi.restraints.stereochemistry
import IMP.pmi.restraints.crosslinking
import IMP.pmi.restraints.basic
import IMP.pmi.restraints.em
import IMP.pmi.restraints.residue_binding
import IMP.pmi.restraints.occams
from IMP.pmi.io.crosslink import CrossLinkDataBaseKeywordsConverter

import random
import numpy as np
import glob
import sys
from sys import exit
#from sys import argv

###################### SYSTEM SETUP #####################

include_amg_distance_restraint = True
include_Occams = True
top_dir = '/wynton/home/sali/ignacia/HARC/Vif/mod_A3G_occams_A3G_Vif1/'

mdl = IMP.Model()

###############################
# Species 1
###############################
top_spec1 = top_dir+'top_A3G_CRL5_flex.dat'
reader_spec1 = IMP.pmi.topology.TopologyReader(top_spec1,
                                               pdb_dir = top_dir+'data/',
                                               fasta_dir = top_dir+'data/')

bs = IMP.pmi.macros.BuildSystem(mdl,
                                resolutions=[1,10])
bs.add_state(reader_spec1)

hier,  dof = bs.execute_macro(max_rb_trans=3.0,
                                          max_rb_rot=0.03)
mols = bs.get_molecules()[0]

output = IMP.pmi.output.Output()
output.init_rmf("ini_all.rmf3", [hier])
output.write_rmf("ini_all.rmf3")
output.close_rmf("ini_all.rmf3")

###############################
# Species 2
###############################
if include_Occams:
    top_spec2 = top_dir+'top_CRL5_temp.dat'
    reader_spec2 = IMP.pmi.topology.TopologyReader(top_spec2,
                                                   pdb_dir = top_dir+'data/',
                                                   fasta_dir = top_dir+'data/')


    bs_spec2 = IMP.pmi.macros.BuildSystem(mdl,
                                          resolutions=[1,10])
    bs_spec2.add_state(reader_spec2)

    hier_S2,  dof_S2 = bs_spec2.execute_macro(max_rb_trans=3.0,
                                              max_rb_rot=0.03)
    mols_S2 = bs_spec2.get_molecules()[0]

##############################
# Combined hierarchy
##############################
if include_Occams:
    p = IMP.Particle(mdl)
    hier_all = IMP.atom.Hierarchy.setup_particle(p)
    hier_all.add_child(hier)
    hier_all.add_child(hier_S2)
    hier_all.set_name('System')

    states = IMP.atom.get_by_type(hier_all,IMP.atom.STATE_TYPE)


###############################
# mmcif related things
###############################

if '--dry-run' in sys.argv:
    bs.dry_run = '--dry-run' in sys.argv
else:
    bs.dry_run = False

if '--mmcif' in sys.argv:
    # Record the modeling protocol to an mmCIF file
    po = IMP.pmi.mmcif.ProtocolOutput(open('A3G-CRL5-Vif_complex_flex.cif', 'w'))
    bs.system.add_protocol_output(po)
    po.system.title = ('Integrative structure determination of the A3G-CRL5-Vif complex ')
    # Add publication
    #po.system.citations.append(ihm.Citation.from_pubmed_id(28821611))


##############################
# Connectivity
##############################
output_objects = [] # keep a list of functions that need to be reported
sample_objects = []
rmf_restraints = []

crs = []
for molname in mols:
    for mol in mols[molname]:
        copy_n = IMP.atom.Copy(mol.get_hierarchy()).get_copy_index()
        cr = IMP.pmi.restraints.stereochemistry.ConnectivityRestraint(mol)
        cr.set_label(mol.get_name()+'.'+str(copy_n))
        cr.add_to_model()
        output_objects.append(cr)
        crs.append(cr)


##############################
# Excluded Volume
##############################
evr1 = IMP.pmi.restraints.stereochemistry.ExcludedVolumeSphere(included_objects=mols.values(),
                                                               resolution=10)
evr1.add_to_model()
evr1.set_weight(1.0)
output_objects.append(evr1)

##############################
# Cross-links
##############################
# INITIALIZE DB    

cldbkc=IMP.pmi.io.crosslink.CrossLinkDataBaseKeywordsConverter()
cldbkc.set_protein1_key("Protein1")
cldbkc.set_protein2_key("Protein2")
cldbkc.set_residue1_key("AbsPos1")
cldbkc.set_residue2_key("AbsPos2")
cldbkc.set_unique_id_key("Id")
cldbkc.set_psi_key("Score")

# XLs RESTRAINT
cldb=IMP.pmi.io.crosslink.CrossLinkDataBase(cldbkc)
cldb.create_set_from_file(top_dir+"data/Interlinks_A3G_Vif_CRL5_20190316_unique_modeling_noA3G.csv")

xl1 = IMP.pmi.restraints.crosslinking.CrossLinkingMassSpectrometryRestraint(root_hier=hier,
                                                                            CrossLinkDataBase=cldb,
                                                                            resolution=1.0,
                                                                            length=26.0,
                                                                            slope=0.001,
									    label='noA3G')
xl1.add_to_model()
xl1.set_weight(2.0)

rmf_restraints.append(xl1)
output_objects.append(xl1)
dof.get_nuisances_from_restraint(xl1)


cldb=IMP.pmi.io.crosslink.CrossLinkDataBase(cldbkc)
cldb.create_set_from_file(top_dir+"data/Interlinks_A3G_Vif_CRL5_20190316_unique_modeling_A3G.csv")

xl2 = IMP.pmi.restraints.crosslinking.CrossLinkingMassSpectrometryRestraint(root_hier=hier,
                                                                            CrossLinkDataBase=cldb,
                                                                            resolution=1.0,
                                                                            length=26.0,
									    label='A3G')
xl2.add_to_model()
xl2.set_weight(15.0)

rmf_restraints.append(xl2)
output_objects.append(xl2)
dof.get_nuisances_from_restraint(xl2)

##############################
# Occams Spring restaint
##############################
if include_Occams:
    occ = IMP.pmi.restraints.occams.OccamsRestraint(hier,
                                                    hier_S2,
                                                    top_dir+'/equiv_assis_s0_s1.dat',
                                                    top_dir+'/data/alns',
                                                    sample_sys_1 = False,
                                                    sigma_init=5.0,
                                                    slope=0.01,
                                                    psi_nuisances_are_optimized=True,
                                                    sigma_nuisances_are_optimized=True)
    occ.add_to_model()
    occ.set_weight(10.0)
    occ.write_distances('')
    rmf_restraints.append(occ)
    output_objects.append(occ)

    print('nuisances:', occ.get_particles_to_sample())
    dof.get_nuisances_from_restraint(occ)

    socc = occ.get_output()
    print(socc)

#####################################################
# Distance restraints for A3G-Vif
#####################################################

if include_amg_distance_restraint == True:
    br1 = IMP.pmi.restraints.residue_binding.ResidueBindingRestraint(hier,
                                                                    ('A3G',126,132,'Vif'),
                                                                    label = 'A124')
    br1.add_to_model()
    br1.set_weight(5.0)
    output_objects.append(br1)

    br2 = IMP.pmi.restraints.residue_binding.ResidueBindingRestraint(hier,
                                                                    ('Vif',40,45,'A3G'),
                                                                    label = 'V26')
    br2.add_to_model()
    br2.set_weight(5.0)
    output_objects.append(br2)

    #br3 = IMP.pmi.restraints.residue_binding.ResidueBindingRestraint(hier,
    #                		                                     ('Vif',69,72,'A3G'),
    #                                                                 label = 'V34')
    #br3.add_to_model()
    #br3.set_weight(4.0)
    #output_objects.append(br3)
    
    
##############################
# Shuffle
##############################
if not bs.dry_run:

    IMP.pmi.tools.shuffle_configuration(hier,
                                        max_translation=60)
    #                                    bounding_box=((-100,-100,-100),(100,100,150)))
    dof.optimize_flexible_beads(200)
############################# SAMPLING ##############################
# Run replica exchange Monte Carlo sampling
rex=IMP.pmi.macros.ReplicaExchange0(mdl,
                                    root_hier=hier,                          
                                    crosslink_restraints=rmf_restraints,           
                                    monte_carlo_sample_objects=dof.get_movers(),
                                    replica_exchange_maximum_temperature=3.0,
                                    global_output_directory="output/",
                                    output_objects=output_objects,
                                    monte_carlo_steps=10,
                                    number_of_frames=60000,
                                    number_of_best_scoring_models=0)

rex.execute_macro()

po.flush()
exit()
'''
if '--mmcif' in sys.argv and 2==3:
    import tempfile
    import shutil
    # Correct number of output models to account for multiple runs
    protocol = po.system.orphan_protocols[-1]
    protocol.steps[-1].num_models_end = 3750000
    # Next, we filtered down to 109951 good scoring models
    analysis = ihm.analysis.Analysis()
    protocol.analyses.append(analysis)
    analysis.steps.append(ihm.analysis.FilterStep(
                            feature='energy/score',
                            num_models_begin=3750000, num_models_end=109951))

    # Finally, we found two clusters
    clusters = [{'rmf':'280_5415.rmf3'},
                {'rmf':'10_2355.rmf3'}]
    for ncluster, cluster in enumerate(clusters):
        with open('../Results/clustering/cluster.%d.all.txt' % ncluster) as fh:
            cluster['size'] = len(fh.readlines())

    analysis.steps.append(ihm.analysis.ClusterStep(
                            feature='RMSD', num_models_begin=109951,
                            num_models_end=sum(x['size'] for x in clusters)))

    tmpd = tempfile.mkdtemp()
    for ncluster, cluster in enumerate(clusters):
        r = ihm.location.Repository(doi="10.5281/zenodo.1445841",
                  url="https://zenodo.org/record/1445841/files/cluster%d.dcd"
                      % ncluster)
        f = ihm.location.OutputFileLocation(path='.', repo=r,
                    details="All ensemble structures for cluster %d" % ncluster)
        e = po._add_simple_ensemble(analysis.steps[-1],
                                    name="Cluster %d" % ncluster,
                                    num_models=cluster['size'],
                                    drmsd=60., num_models_deposited=1,
                                    localization_densities={},
                                    ensemble_file=f)
        # Add localization density for ecm29
        loc = ihm.location.OutputFileLocation(
               '../Results/localizations_densities/%d_ecm29.mrc' % (ncluster+1))
        den = ihm.model.LocalizationDensity(file=loc,
                                            asym_unit=po.asym_units['ecm29.0'])
        e.densities.append(den)

        # Add one output model
        rmf_file = fix_rmf_file('../Results/clustering/%s' % cluster['rmf'],
                                moldict, tmpd)
        rh = RMF.open_rmf_file_read_only(rmf_file)
        IMP.rmf.link_hierarchies(rh, [representation])
        IMP.rmf.load_frame(rh, RMF.FrameID(0))
        del rh

        model = po.add_model(e.model_group)
    shutil.rmtree(tmpd)

    # Correct crosslinker type from "Lan" to DSSO
    for r in po.system.restraints:
        if hasattr(r, 'linker_type') and r.linker_type == 'Lan':
            r.linker_type = 'DSSO'

    # Point to repositories where files are deposited
    repos = [ihm.location.Repository(
          doi="10.5281/zenodo.1445841", root="..",
          url="https://zenodo.org/record/1445841/files/ecm29-master.zip",
          top_directory="ecm29-master")]
    for subdir, zipname in make_archive.ARCHIVES.items():
        repos.append(ihm.location.Repository(
              doi="10.5281/zenodo.1445841", root="../%s" % subdir,
              url="https://zenodo.org/record/1445841/files/%s.zip" % zipname,
              top_directory=os.path.basename(subdir)))
    po.system.update_locations_in_repositories(repos)

    po.flush()
'''

exit()

